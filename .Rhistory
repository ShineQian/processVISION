}
progdir <- file.path(homedir, "programs")
datadir <- file.path(homedir, "input_data")
xmldir <- file.path(homedir, "input_xml")
RD <- function() setwd(progdir)
RD()
### XML filename
## group - 1 patients, 2 sites
igroup <- 2
groups <-  c("Subjects", "Sites")
# for (igroup in 1:2){
group <- groups[igroup]
date <- "2014_01_06"
xmlstub <- paste("MISTIE_III_", group, "_", date, sep="")
##unzip the file, read it, then trash it
# zipfile <- file.path(datadir, paste0(xmlstub, ".zip"))
# files.inzip <- unzip(zipfile, list=TRUE)
# files.inzip <- as.character(files.inzip$Name)
# files.inzip <- files.inzip[
# 	!(substr(files.inzip, 1,1 ) %in% c("_", ".")) ]
# files.inzip <- basename(files.inzip)
# stopifnot(length(files.inzip) == 1)
# unzip(zipfile, exdir=datadir, junkpaths=TRUE, overwrite=TRUE)
xmlfile <- paste(xmlstub, ".xml", sep="")
xmlfile <- file.path(xmldir, xmlfile)
# file.rename(file.path(datadir, files.inzip), xmlfile)
#### Parse the XML
system.time(proc <- xmlParse(xmlfile))
df <- processVISION(xmlfile,
drop.dsets=c("i_Doc_List_personnel_std",
"i_Doc_List_site_std",
"i_Doc_List_site_addl"))
# xmlList <- xmlToList(xmlfile)
write32.dta(df$df.list[[1]], file="~/Desktop/test.dta", version=10L)
sapply(df$df.list, colnames)
sapply(sapply(df$df.list, colnames), function(x) max(nchar(x)))
which(names(df$df.list) == "survey")
x <- df$df.list[[20]]
x
write32.dta(df$df.list[[20]], file="~/Desktop/test.dta", version=10L)
colnames(x)
nchar()colnames(x)
nchar(colnames(x))
which(nchar(colnames(x)) > 31)
colnames(x)[which(nchar(colnames(x)) > 31)]
x$willing_ansr_email_in_3days_note
class(x$willing_ansr_email_in_3days_note)
class(x$willing_ansr_email_in_3days_note) <- "character"
class(x$willing_ansr_email_in_3days_note)
x$willing_ansr_email_in_3days_note
write32.dta(df$df.list[[20]], file="~/Desktop/test.dta", version=10L)
write32.dta(x, file="~/Desktop/test.dta", version=10L)
library(processVISION)
x
write32.dta(df$df.list[[20]], file="~/Desktop/test.dta", version=10L)
library(processVISION)
write32.dta(df$df.list[[20]], file="~/Desktop/test.dta", version=10L)
library(processVISION)
#########################################################################
### XML Parser for Prelude Dynamics XML file for CLEAR Data
### Author/Owner: John Muschelli
### Written: 2013Nov13
#########################################################################
## clear the memory
rm(list=ls())
library(processVISION)
if (.Platform$OS.type == "windows"){
homedir <- "C:/Users/awentz2/Dropbox/"
} else {
homedir <- "~/Dropbox/CTR/DHanley/MISTIE_III/"
homedir <- path.expand(homedir)
}
progdir <- file.path(homedir, "programs")
datadir <- file.path(homedir, "input_data")
xmldir <- file.path(homedir, "input_xml")
RD <- function() setwd(progdir)
RD()
### XML filename
## group - 1 patients, 2 sites
igroup <- 1
groups <-  c("Subjects", "Sites")
# for (igroup in 1:2){
group <- groups[igroup]
date <- "2014_01_07"
xmlstub <- paste("MISTIE_III_", group, "_", date, sep="")
##unzip the file, read it, then trash it
# zipfile <- file.path(datadir, paste0(xmlstub, ".zip"))
# files.inzip <- unzip(zipfile, list=TRUE)
# files.inzip <- as.character(files.inzip$Name)
# files.inzip <- files.inzip[
# 	!(substr(files.inzip, 1,1 ) %in% c("_", ".")) ]
# files.inzip <- basename(files.inzip)
# stopifnot(length(files.inzip) == 1)
# unzip(zipfile, exdir=datadir, junkpaths=TRUE, overwrite=TRUE)
xmlfile <- paste(xmlstub, ".xml", sep="")
xmlfile <- file.path(xmldir, xmlfile)
# file.rename(file.path(datadir, files.inzip), xmlfile)
proc <- xmlParse(xmlfile)
### get datasets name
xroot <- xmlRoot(proc)
n <- names(xroot)
dsets <- unique(n)
### get the list of all data sets
ldsets <- sort(unique(tolower(dsets)))
keep.pattern=c("i_Doc_.*", "ct_lab.*")
sapply(keep.pattern, grepl, x=dsets)
dset.mat <- sapply(keep.pattern, grepl, x=dsets)
dset.mat
dim(dset.mat)
dset.mat = sapply(keep.pattern, grepl, x=dsets)
dset.vec = apply(dset.mat, 1, any)
dset.vec
keep.pattern = keep.pattern[1]
dset.mat = sapply(keep.pattern, grepl, x=dsets)
dset.vec = apply(dset.mat, 1, any)
dset.vec
dset.mat
library(processVISION)
?XMLAbstractDocument
#' Process a VISION XML file from their EDC
#' @name processVISION
#' @aliases processVISION
#' @description This function takes in a XML and creates a list of
#' R data.frames
#' @param xml XML filename from VISION EDC, or if \code{\link{xmlParse}}
#' has already been run, then the XML document with class
#' \code{XMLAbstractDocument}.
#' if (\code{isXML = FALSE}), should have ".xml" extension
#' not ".zip".
#' @param isXML (logical) indicating whether \code{xml} is an
#' \code{XMLAbstractDocument} class (TRUE), or a filename (default FALSE)
#'
#' @param drop.dsets vector of dataset names that can be dropped (NULL)
#' @param dset.names vector of dataset names to match (after dropping drop.dsets)
#' if these do not match EXACTLY (case) the dataset names (all of them),
#' this will error(NULL)
#' @param drop.pattern vector of regular expression that will drop datasets
#' that contain patterns using \link{grep}
#' @param keep.pattern vector of regular expression that will keep only datasets
#' that contain any of the patterns \link{grep}
#'
#' @param verbose logical - Progress printed?(TRUE)
#' @export
#' @examples
#' \dontrun{
#' }
#' @seealso \code{\link{xmlParse}}, \code{\link{xmlRoot}}
#' @return A list with slots df.list, the list of datasets,
#' datetime, the date/time the data was exported according to the XML,
#' dsets, the dataset names, should match names(df.list).
processVISION <- function(xmlfile,
isXML=FALSE,
drop.dsets = NULL,
dset.names = NULL,
verbose=TRUE,
drop.pattern = NULL,
keep.pattern = NULL){
run <- get.dnames(xmlfile, isXML=isXML, names.only=FALSE)
dsets <- run$dsets
proc <- run$proc
run <- NULL
### get the list of all data sets
ldsets <- sort(unique(tolower(dsets)))
### dsets is the datasets to run
if (!is.null(drop.dsets)) dsets <- dsets[ !(dsets %in% drop.dsets) ]
### drop pattern
if (!is.null(drop.pattern)) {
dset.mat = sapply(drop.pattern, grepl, x=dsets)
dset.drop = apply(dset.mat, 1, any)
dsets <- dsets[ !dset.drop ]
}
### keep pattern
if (!is.null(keep.pattern)) {
dset.mat = sapply(keep.pattern, grepl, x=dsets)
dset.keep = apply(dset.mat, 1, any)
dsets <- dsets[ dset.keep ]
}
ndsets <- length(dsets)
sd.1 <- setdiff(dsets, dset.names)
sd.2 <- setdiff(dset.names, dsets)
if (length(sd.1) > 0 & !is.null(dset.names)){
print(sd.1)
stop("These are datasets in the xml, but not the check names")
}
if (length(sd.2) > 0){
print(sd.2)
stop("These are datasets in the checknames, but not the xml")
}
df.list <- vector(mode="list", length=ndsets)
names(df.list) <- dsets
### loop through, converting every dataset to a data.frame.
for (idset in 1:ndsets){
dname <- dsets[idset]
if (verbose) print(dname)
dset <- paste0("//", dname)
#### get the records for that form
nodeset <- getNodeSet(proc, dset)
### convert to data.frame
dataset <- xmlToDataFrame(doc=proc, nodes=nodeset)
### replace any empty strings with NA
spaces <- sapply(dataset, function(x) x %in% "")
dataset[spaces] <- NA
df.list[[dname]] <- dataset
}
### get date/time from the export from the XML
dt <- xpathApply(proc, "//export_from_vision_EDC",
xmlGetAttr, "date")[[1]]
ss <- strsplit(dt, " ")[[1]]
datetime <- paste(ss[1:2], collapse="_")
datetime <- gsub(":", "", datetime)
return(list(df.list=df.list, datetime=datetime, dsets=dsets))
}
#' Process a VISION XML file from their EDC
#' @name get.dsets
#' @aliases get.dsets
#' @description Gets the dataset names from an VISION XML document
#' @param xml XML filename from VISION EDC, or if \code{\link{xmlParse}}
#' has already been run, then the XML document with class
#' \code{XMLAbstractDocument}.
#' if (\code{isXML = FALSE}), should have ".xml" extension
#' not ".zip".
#' @param isXML (logical) indicating whether \code{xml} is an
#' \code{XMLAbstractDocument} class (TRUE), or a filename (default FALSE)
#' @param names.only (logical) return only the dataset names, (default TRUE)
#' @export
#' @examples
#' \dontrun{
#' }
#' @seealso \code{\link{xmlParse}}, \code{\link{xmlRoot}}
#' @return A list with slots dsets, the dataset names, and if
#' \code{names.only = FALSE}, proc, the XML parsed object.
get.dnames <- function(xml, isXML=FALSE, names.only=TRUE)
## parse the xml
if (isXML){
### make sure an XML document
stopifnot(inherits(proc, "XMLAbstractDocument"))
proc <- xml
} else {
proc <- xmlParse(xml)
}
### get datasets name
xroot <- xmlRoot(proc)
n <- names(xroot)
dsets <- unique(n)
return(list(dsets=dsets, proc=proc))
}
library(processVISION)
?attach
library(processVISION)
library(processVISION)
library(processVISION)
library(processVISION)
?format
?as.Date
library(processVISION)
library(processVISION)
library(processVISION)
?foreign-package
?"foreign-package"
help(pacakge="foreign")
help(package="foreign")
library(processVISION)
library(processVISION)
library(processVISION)
library(processVISION)
#########################################################################
### XML Parser for Prelude Dynamics XML file for CLEAR Data
### Author/Owner: John Muschelli
### Written: 2013Nov13
#########################################################################
## clear the memory
rm(list=ls())
if (!require(devtools)) install.packages("devtools")
require(devtools)
if (!require(processVISION)) install_github("processVISION", "muschellij2")
library(processVISION)
if (.Platform$OS.type == "windows"){
homedir <- "C:/Users/awentz2/Dropbox/"
} else {
homedir <- "~/Dropbox/CTR/DHanley/MISTIE_III/"
homedir <- path.expand(homedir)
}
progdir <- file.path(homedir, "programs")
datadir <- file.path(homedir, "input_data")
xmldir <- file.path(homedir, "input_xml")
RD <- function() setwd(progdir)
RD()
### XML filename
## group - 1 patients, 2 sites
igroup <- 1
groups <-  c("Subjects", "Sites")
# for (igroup in 1:2){
group <- groups[igroup]
date <- "2014_01_09"
### xml file is MISTIE_III_Subjects_2014_01_09 for example
xmlstub <- paste("MISTIE_III_", group, "_", date, sep="")
xmlfile <- paste(xmlstub, ".xml", sep="")
xmlfile
library(processVISION)
library(processVISION)
library(processVISION)
?create_stata_dta
library(processVISION)
#########################################################################
### XML Parser for Prelude Dynamics XML file for CLEAR Data
### Author/Owner: John Muschelli
### Written: 2013Nov13
#########################################################################
## clear the memory
rm(list=ls())
if (!require(devtools)) install.packages("devtools")
require(devtools)
if (!require(processVISION)) install_github("processVISION", "muschellij2")
library(processVISION)
if (.Platform$OS.type == "windows"){
homedir <- "C:/Users/awentz2/Dropbox/"
} else {
homedir <- "~/Dropbox/CTR/DHanley/CLEAR_III/"
homedir <- path.expand(homedir)
}
progdir <- file.path(homedir, "programs")
datadir <- file.path(homedir, "input_data")
xmldir <- file.path(homedir, "input_xml")
RD <- function() setwd(progdir)
RD()
### XML filename
## group - 1 patients, 2 sites
igroup <- 1
groups <-  c("Subjects", "Sites")
# for (igroup in 1:2){
group <- groups[igroup]
date <- "2014_01_13"
### xml file is MISTIE_III_Subjects_2014_01_09 for example
xmlstub <- paste("CLEAR_III_", group, "_", date, sep="")
xmlfile <- paste(xmlstub, ".xml", sep="")
xmlfile <- file.path(xmldir, xmlfile)
#### Parse the XML - you may skip this step
system.time(proc <- xmlParse(xmlfile))
dnames <- get.dnames(proc, isXML=TRUE, names.only=TRUE)$dsets
df <- processVISION(proc,
isXML=TRUE,
drop.pattern=c("^i_Doc_.*", "^docs_.*"),
drop.new=TRUE, writedta=TRUE, outdir=datadir)
:q
#########################################################################
### XML Parser for Prelude Dynamics XML file for CLEAR Data
### Author/Owner: John Muschelli
### Written: 2013Nov13
#########################################################################
## clear the memory
rm(list=ls())
if (!require(devtools)) install.packages("devtools")
require(devtools)
if (!require(processVISION)) install_github("processVISION", "muschellij2")
library(processVISION)
if (.Platform$OS.type == "windows"){
homedir <- "C:/Users/awentz2/Dropbox/"
} else {
homedir <- "~/Dropbox/CTR/DHanley/CLEAR_III/"
homedir <- path.expand(homedir)
}
progdir <- file.path(homedir, "programs")
datadir <- file.path(homedir, "input_data")
xmldir <- file.path(homedir, "input_xml")
RD <- function() setwd(progdir)
RD()
### XML filename
## group - 1 patients, 2 sites
igroup <- 1
groups <-  c("Subjects", "Sites")
# for (igroup in 1:2){
group <- groups[igroup]
date <- "2014_01_13"
### xml file is MISTIE_III_Subjects_2014_01_09 for example
xmlstub <- paste("CLEAR_III_", group, "_", date, sep="")
xmlfile <- paste(xmlstub, ".xml", sep="")
xmlfile <- file.path(xmldir, xmlfile)
#### Parse the XML - you may skip this step
system.time(proc <- xmlParse(xmlfile))
dnames <- get.dnames(proc, isXML=TRUE, names.only=TRUE)$dsets
df <- processVISION(proc,
isXML=TRUE,
drop.pattern=c("^i_Doc_.*", "^docs_.*"),
drop.dsets="i_IVC_icp_management"
drop.new=TRUE, writedta=TRUE, outdir=datadir)
dnames
which(dnames == "i_IVC_icp_management")
keep.dsets = dnames[29:length(dnames)]
df <- processVISION(proc,
isXML=TRUE,
drop.pattern=c("^i_Doc_.*", "^docs_.*"),
drop.dsets="i_IVC_icp_management",
keep.dsets=keep.dsets,
drop.new=TRUE, writedta=TRUE, outdir=datadir)
library(processVISION)
library(processVISION)
library(processVISION)
library(processVISION)
library(processVISION)
library(processVISION)
library(processVISION)
#########################################################################
### XML Parser for Prelude Dynamics XML file for CLEAR Data
### Author/Owner: John Muschelli
### Written: 2013Nov13
#########################################################################
## clear the memory
rm(list=ls())
if (!require(devtools)) install.packages("devtools")
require(devtools)
if (!require(processVISION)) install_github("processVISION", "muschellij2")
library(processVISION)
if (.Platform$OS.type == "windows"){
homedir <- "C:/Users/awentz2/Dropbox/"
} else {
homedir <- "~/Dropbox/CTR/DHanley/CLEAR_III/"
if (Sys.info()['user'] == "jmuschel"){
homedir = "~/CLEAR_III"
}
homedir <- path.expand(homedir)
}
progdir <- file.path(homedir, "programs")
datadir <- file.path(homedir, "input_data")
xmldir <- file.path(homedir, "input_xml")
RD <- function() setwd(progdir)
RD()
### XML filename
## group - 1 patients, 2 sites
igroup <- 1
groups <-  c("Subjects", "Sites")
# for (igroup in 1:2){
group <- groups[igroup]
date <- "2014_01_13"
### xml file is CLEAR_III_Subjects_2014_01_09 for example
xmlstub <- paste("CLEAR_III_", group, "_", date, sep="")
xmlfile <- paste(xmlstub, ".xml", sep="")
xmlfile <- file.path(xmldir, xmlfile)
#### Parse the XML - you may skip this step
system.time(proc <- xmlParse(xmlfile))
dnames <- get.dnames(proc, isXML=TRUE, names.only=TRUE)$dsets
#########################################################################
### XML Parser for Prelude Dynamics XML file for CLEAR Data
### Author/Owner: John Muschelli
### Written: 2013Nov13
#########################################################################
## clear the memory
rm(list=ls())
if (!require(processVISION)) {
if (!require(devtools)) install.packages("devtools")
require(devtools)
install_github("processVISION", "muschellij2")
}
library(processVISION)
if (.Platform$OS.type == "windows"){
homedir <- "C:/Users/awentz2/Dropbox/"
} else {
homedir <- "~/Dropbox/CTR/DHanley/CLEAR_III/"
if (Sys.info()['user'] == "jmuschel"){
homedir = "~/CLEAR_III"
}
homedir <- path.expand(homedir)
}
progdir <- file.path(homedir, "programs")
datadir <- file.path(homedir, "input_data")
xmldir <- file.path(homedir, "input_xml")
RD <- function() setwd(progdir)
RD()
### XML filename
## group - 1 patients, 2 sites
igroup <- 1
groups <-  c("Subjects", "Sites")
# for (igroup in 1:2){
group <- groups[igroup]
date <- "2014_01_13"
### xml file is CLEAR_III_Subjects_2014_01_09 for example
xmlstub <- paste("CLEAR_III_", group, "_", date, sep="")
xmlfile <- paste(xmlstub, ".xml", sep="")
xmlfile <- file.path(xmldir, xmlfile)
#### Parse the XML - you may skip this step
system.time(proc <- xmlParse(xmlfile))
dnames <- get.dnames(proc, isXML=TRUE, names.only=TRUE)$dsets
library(processVISION)
library(processVISION)
library(processVISION)
library(knitr)
if (!require('RWordPress'))
install.packages('RWordPress',
repos = 'http://www.omegahat.org/R',
type = 'source')
library(RWordPress)
options(WordpressLogin = c(strictlystat = 'hopkinsstat'))
uname <- names(getOption("WordpressLogin"))
options( WordpressURL = paste0('http://hopstat.wordpress.com/xmlrpc.php'))
wpfol <- "WordPress_Hopstat"
wpdir <- file.path("~/Dropbox/Public", wpfol)
wpdir <- path.expand(wpdir)
### change this for the new folder
folname <- "Faster_XML_to_DataFrame"
rmdname <- file.path(wpdir, folname,  paste0(folname, ".Rmd"))
stopifnot(file.exists(rmdname))
opts_knit$set(base.url = paste0('https://dl.dropboxusercontent.com/u/600586/', wpfol, '/'),
base.dir = wpdir)
knit2wp(rmdname,
title = 'Faster XML conversion to Data Frames', shortcode=TRUE)
x = "/Users/johnmuschelli/mipav/plugins/ptolemy/actor/gt/demo/ConstOptimization/BaseModel.xml"
x
library(processVISION)
doc = xmlParse(x)
dpc
doc
class(doc)
library(processVISION)
